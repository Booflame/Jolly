/* Box sizing rules */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Remove default margin */
body,
blockquote,
dd,
dl,
figure,
h1,
h2,
h3,
h4,
p {
  margin: 0;
}

/* margin and padding from lists */
ol,
ul {
  margin: 0;
  padding: 0;
}

/* remove list style from list with attribute role ="list" */
ol[role=list],
ul[role=list] {
  list-style: none;
}

/* Set core root defaults */
html:focus-within {
  scroll-behavior: smooth;
}

/* Set core body defaults */
body {
  min-height: 100vh;
  text-rendering: optimizeSpeed;
  line-height: 1.5;
}

/* a elements that don't have a class get default styles */
a:not([class]) {
  -webkit-text-decoration-skip: ink;
          text-decoration-skip-ink: auto;
}

/* Make images easier to work with */
img,
picture,
svg {
  display: block;
  max-width: 100%;
}

img[width] {
  height: auto;
}

/* Inherit fonts for inputs and buttons */
input,
button,
textarea,
select {
  font: inherit;
}

/* Remove all animations, transitions and smooth scroll for people that prefer not to see them */
@media (prefers-reduced-motion: reduce) {
  html:focus-within {
    scroll-behavior: auto;
  }

  *,
*::before,
*::after {
    -webkit-animation-duration: 0.01ms !important;
            animation-duration: 0.01ms !important;
    -webkit-animation-iteration-count: 1 !important;
            animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}
.flex {
  display: flex;
}
.flex-center {
  justify-content: center;
  align-items: center;
}
.flex-jc-c {
  justify-content: center;
}
.flex-jc-sb {
  justify-content: space-between;
}
.flex-jc-fe {
  justify-content: flex-end;
}
.flex-ai-c {
  align-items: center;
}
.flex-ai-fe {
  align-items: flex-end;
}
.flexc {
  display: flex;
  flex-direction: column;
}
.flexbox {
  display: flex;
  flex: 1;
}
.flex-mobile {
  display: flex;
  flex-direction: column;
}
@media only screen and (min-width: 28em) {
  .flex-mobile {
    flex-direction: row;
  }
}

.gap-100 {
  gap: 1rem;
}
.gap-150 {
  gap: 1.5rem;
}
.gap-200 {
  gap: 2rem;
}

.ps-rel {
  position: relative;
}
.ps-abs {
  position: absolute;
}

html {
  font-size: 100%;
  overflow-x: hidden;
}

.pancake {
  display: grid;
  grid-template-rows: auto 1fr auto;
}

.wrapper {
  width: 90%;
  margin-inline: auto;
}

.burger {
  all: unset;
  position: absolute;
  width: 36px;
  aspect-ratio: 1;
  padding-inline: 0.3em;
  top: 50%;
  right: 5%;
  transform: translateY(-50%);
  z-index: 99;
}
@media only screen and (min-width: 28em) {
  .burger {
    display: none;
  }
}

.inner-burger,
.inner-burger::before,
.inner-burger::after {
  display: block;
  width: 36px;
  height: 4px;
  background-color: #f5323c;
  transition: transform 100ms ease-in-out;
}

.inner-burger {
  position: relative;
}

.inner-burger::before,
.inner-burger::after {
  position: absolute;
  content: "";
}

.inner-burger::before {
  top: calc(-4px - 7px);
}

.inner-burger::after {
  top: calc(4px + 7px);
}

.burger[aria-expanded=true] .inner-burger {
  transform: rotateZ(45deg);
}

.burger[aria-expanded=true] .inner-burger::before {
  transform: translateY(calc(4px + 7px)) rotateZ(-90deg);
}

.burger[aria-expanded=true] .inner-burger::after {
  display: none;
}

header {
  min-height: 70px;
  background-color: #282424;
  position: relative;
  padding-block: 1rem;
}
header nav {
  position: absolute;
  top: 100%;
  left: 0;
  right: 0;
  background-color: #282424;
  z-index: 98;
}
@media only screen and (min-width: 28em) {
  header nav {
    position: static;
  }
}
header nav[data-visible=false] {
  display: none;
}
@media only screen and (min-width: 28em) {
  header nav[data-visible=false] {
    display: block;
  }
}
header nav[data-visible=true] {
  display: block;
}
header a {
  text-decoration: none;
  font-size: 2rem;
  color: #f5323c;
}
header .logo {
  width: 200px;
}

footer {
  min-height: 100px;
  background-color: #282424;
}

.hero {
  background-color: #f5323c;
  min-height: 500px;
  -webkit-clip-path: polygon(0 0, 100% 0%, 100% 75%, 0% 100%);
          clip-path: polygon(0 0, 100% 0%, 100% 75%, 0% 100%);
}